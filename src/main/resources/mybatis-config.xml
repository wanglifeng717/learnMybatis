<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--全局配置文件也是有顺序的。每个标签的顺序是不能变的。  -->
    <!-- 
        1.mybatis 可以使用properties来引入外部的properties配置文件的内容：
        resource:引入类路径下的资源,如果在类路径下面就直接写文件名，要是还在包里面
        url:引入网络路径路径或者磁盘路径下的资源
     -->
     <properties resource="dbconf/dbconf.properties"></properties>

    <!-- 
        2、settings包含很多重要的设置项
        setting:用来设置每一个设置项
            name：设置项名
            value：设置项取值
              示例中：我们数据库取名一般带下划线last_name，但是我们java类中命名一般是lastName的驼峰方式。
               这里设置后我们就不用去取别名什么的了，直接就映射上了 last_name -> lastName
               注意：这里的映射只是去掉了下划线。比如last_name 和 LaStNaMe 这种也是能映射上去的。显然集体转化为了大写或者小写
                由于全局配置中如果null会映射成other 我们这里强制使用null。不然oracle中是不识别的。
     -->
    <settings> 
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <setting name="jdbcTypeForNull" value="NULL"/>
        <!-- 显式的更改配置的值，即使是默认的，防止版本更替出现问题-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
    
    </settings>

    <!-- 3、typeAliases：别名处理器：可以为我们的java类型起别名 ，在类映射文件resultType中可以用别名
            别名不区分大小写
            其实用全类名的方式还是挺好的，方便我们点住ctrl单击找到对应的类。
            而且mybatis本身就有了一些别名，你不要取名字取重了。
    -->
    <typeAliases>
        <!-- 1、typeAlias:为某个java类型起别名
                type:指定要起别名的类型全类名;默认别名就是类名小写；employee
                alias:指定新的别名
         -->
        <!-- <typeAlias type="com.atguigu.mybatis.bean.Employee" alias="emp"/> -->
        
        <!-- 2、package:为某个包下的所有类批量起别名 
                name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写），）
        -->
        <package name="com.tongji.bean"/>
        
        <!-- 3、批量起别名的情况下，有很多包，里面可能有重复的类。使用@Alias注解为某个类型指定新的别名
                        就是在类的前面加一个注解@Alias("emp") 这样这个类以后的别名就叫emp了-->
    </typeAliases>

    <!-- 
        4、environments：环境们，mybatis可以配置多种环境 ,default指定使用某种环境。可以达到快速切换环境。
            environment：配置一个具体的环境信息；必须有两个标签；id代表当前环境的唯一标识
                transactionManager：事务管理器；
                    type：事务管理器的类型;JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)
                        自定义事务管理器：实现TransactionFactory接口.type指定为全类名
                
                dataSource：数据源;
                    type:数据源类型;UNPOOLED(UnpooledDataSourceFactory)不使用连接池
                                |POOLED(PooledDataSourceFactory)
                                |JNDI(JndiDataSourceFactory)
                    自定义数据源：实现DataSourceFactory接口，type是全类名
         -->
         
	<environments default="mysql">
		<environment id="oracle">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value= "${jdbc.username}"/>
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
		<!-- 这样我们开发和测试的数据库就能区别开了，只要选择即可 -->
		<environment id="mysql">
            <transactionManager type="JDBC"></transactionManager>
            <dataSource type="POOLED">
                <property name="driver" value="${mysql.driver}" />
                <property name="url" value="${mysql.url}" />
                <property name="username" value="${mysql.username}" />
                <property name="password" value="${mysql.password}" />
            </dataSource>
        </environment>
	</environments>
	
	
    <!-- 5、databaseIdProvider：支持多数据库厂商的，对多数据库厂商的支持；
         type="DB_VENDOR"：VendorDatabaseIdProvider
            作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;
            MySQL，Oracle，SQL Server,xxxx
            
            这个要和sql语句，上面的数据库环境结合，这样识别出不同的数据库，然后就发不同的SQL语句过去。
            这样就完成了对多数据库的支持。
    <select id="getEmpById" resultType="com.atguigu.mybatis.bean.Employee"
        databaseId="mysql">
        select * from tbl_employee where id = #{id}
    </select>
    <select id="getEmpById" resultType="com.atguigu.mybatis.bean.Employee"
        databaseId="oracle">
        select EMPLOYEE_ID id,LAST_NAME lastName,EMAIL email 
        from employees where EMPLOYEE_ID=#{id}
    </select>
      -->
    <databaseIdProvider type="DB_VENDOR">
        <!-- 为不同的数据库厂商起别名 -->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>
	
	
	
	
	
	<!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 -->
    <!-- 6、mappers：将sql映射注册到全局配置中 -->
    <mappers>
        <!-- 
            mapper:注册一个sql映射 
                注册配置文件
                resource：引用类路径下的sql映射文件
                    "com/tongji/dao/EmployeeMapper.xml"
                url：引用网路路径或者磁盘路径下的sql映射文件
                    file:///var/mappers/AuthorMapper.xml
             <mapper resource="com/tongji/dao/EmployeeMapper.xml"/>  
                注册接口
                class：引用（注册）接口，
                    1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
                                                                我们source和resource下面都有com.tongji.dao包，这两个包是一回事。在bin文件夹下都在一个地方。
              <mapper class ="com.tongji.dao.EmployeeMapper"/>                                       
                    2、没有sql映射文件，所有的sql都是利用注解写在接口上;
                                                                    在接口上写个注解，我们把接口注册进来，我们SQL和接口的映射文件都不用写了。
               <mapper class ="com.tongji.dao.EmployeeMapperAnnotation"/>
                    推荐：
        xml的方式 比较重要的，复杂的Dao接口我们来写sql映射文件
                        不重要，简单的Dao接口为了开发快速可以使用注解；
        -->
        
        
        <!-- 批量注册： 基于注解的方式是可以的,因为接口的方式，接口和映射文件在一个包下面，所以也是可以的。-->
        <!-- <package name="com.tongji.dao"/> -->
        <package name="com.tongji.dao"/>
        
    </mappers>
	
</configuration>